import { expect } from 'chai'
import { BigNumber } from 'ethers'
import { hexToDecimalString } from './utils/hexToDecimalString'
import { expandTo18DecimalsBN } from '../src/utils/expandTo18Decimals'
import { SwapRouter } from '../src/swapRouter'
import { TokenType } from '../src/entities/NFTTrade'
import { FoundationTrade, FoundationData } from '../src/entities/protocols/foundation'
import { ConsiderationItem, SeaportTrade } from '../src/entities/protocols/seaport'
import { seaportData2Covens, seaportValue } from './orders/seaport'
import { NFTXTrade, NFTXData } from '../src/entities/protocols/nftx'
import { NFT20Trade, NFT20Data } from '../src/entities/protocols/nft20'
import { looksRareOrders } from './orders/looksRare'
import { x2y2Orders } from './orders/x2y2'
import { LooksRareData, LooksRareTrade, MakerOrder, TakerOrder } from '../src/entities/protocols/looksRare'
import { SudoswapTrade, SudoswapData } from '../src/entities/protocols/sudoswap'
import { CryptopunkTrade, CryptopunkData } from '../src/entities/protocols/cryptopunk'
import { X2Y2Data, X2Y2Trade } from '../src/entities/protocols/x2y2'
import { registerFixture } from './forge/writeInterop'

const FORGE_SENDER_ADDRESS = '0xcf03dd0a894ef79cb5b601a43c4b25e3ae4c67ed'
const SAMPLE_ADDR = '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'

// this is the address forge is deploying the router to
const ROUTER_ADDR = '0x4a873bdd49f7f9cc0a5458416a12973fab208f8d'

describe.only('SwapRouter', () => {
  describe('#swapNFTCallParameters', () => {
    it('returns hex number value in Method Parameters', async () => {
      const foundationData: FoundationData = {
        referrer: '0x459e213D8B5E79d706aB22b945e3aF983d51BC4C',
        tokenAddress: '0xEf96021Af16BD04918b0d87cE045d7984ad6c38c',
        tokenId: 32,
        price: expandTo18DecimalsBN(0.01),
        recipient: SAMPLE_ADDR,
      }

      const foundationTrade = new FoundationTrade([foundationData])
      const methodParameters = SwapRouter.swapNFTCallParameters([foundationTrade], { sender: FORGE_SENDER_ADDRESS })
      expect(methodParameters.value).to.eq('0x2386f26fc10000')
    })
  })

  describe('Foundation', () => {
    // buyItem from block 15725945
    const foundationData: FoundationData = {
      referrer: '0x459e213D8B5E79d706aB22b945e3aF983d51BC4C',
      tokenAddress: '0xEf96021Af16BD04918b0d87cE045d7984ad6c38c',
      tokenId: 32,
      price: expandTo18DecimalsBN(0.01),
      recipient: SAMPLE_ADDR,
    }

    it('encodes a single foundation trade', async () => {
      const foundationTrade = new FoundationTrade([foundationData])
      const methodParameters = SwapRouter.swapNFTCallParameters([foundationTrade], { sender: FORGE_SENDER_ADDRESS })
      const methodParametersV2 = SwapRouter.swapCallParameters([foundationTrade], { sender: FORGE_SENDER_ADDRESS })
      registerFixture('_FOUNDATION_BUY_ITEM', methodParameters)
      expect(hexToDecimalString(methodParameters.value)).to.eq(foundationData.price.toString())
      expect(methodParameters.calldata).to.eq(
        '0x24856bc30000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000021c040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000ef96021af16bd04918b0d87ce045d7984ad6c38c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000084b01ef608000000000000000000000000ef96021af16bd04918b0d87ce045d7984ad6c38c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000459e213d8b5e79d706ab22b945e3af983d51bc4c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cf03dd0a894ef79cb5b601a43c4b25e3ae4c67ed0000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(methodParameters.calldata).to.eq(methodParametersV2.calldata)
      expect(methodParameters.value).to.eq(methodParametersV2.value)
    })
  })

  describe('NFTX', () => {
    // buyItems from block 15360000
    const nftxPurchase2Covens: NFTXData = {
      recipient: SAMPLE_ADDR,
      vaultAddress: '0xd89b16331f39ab3878daf395052851d3ac8cf3cd',
      vaultId: 333,
      tokenAddress: '0x5180db8f5c931aae63c74266b211f580155ecac8',
      tokenIds: [584, 3033],
      value: expandTo18DecimalsBN(1),
    }

    it('encodes buying two NFTs from a single NFTX vault', async () => {
      const nftxTrade = new NFTXTrade([nftxPurchase2Covens])
      const methodParameters = SwapRouter.swapNFTCallParameters([nftxTrade], { sender: FORGE_SENDER_ADDRESS })
      registerFixture('_NFTX_BUY_ITEMS', methodParameters)
      expect(hexToDecimalString(methodParameters.value)).to.eq(expandTo18DecimalsBN(1).toString())
      expect(methodParameters.calldata).to.eq(
        '0x24856bce00000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001647fc82484000000000000000000000000000000000000000000000000000000000000014d000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000002480000000000000000000000000000000000000000000000000000000000000bd90000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000d89b16331f39ab3878daf395052851d3ac8cf3cd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cf03dd0a894ef79cb5b601a43c4b25e3ae4c67ed0000000000000000000000000000000000000000000000000000000000000000'
      )
    })
  })

  describe('LooksRare', () => {
    const recipient = SAMPLE_ADDR

    const looksRareOrder721: MakerOrder = looksRareOrders[0]
    const looksRareOrder1155: MakerOrder = looksRareOrders[2]

    // buyItems from block 15360000
    const makerOrder721: MakerOrder = looksRareOrder721
    const takerOrder721: TakerOrder = {
      minPercentageToAsk: looksRareOrder721.minPercentageToAsk,
      price: looksRareOrder721.price,
      taker: ROUTER_ADDR,
      tokenId: looksRareOrder721.tokenId,
      isOrderAsk: false,
      params: looksRareOrder721.params,
    }
    const looksRareData721: LooksRareData = {
      makerOrder: makerOrder721,
      takerOrder: takerOrder721,
      recipient,
      tokenType: TokenType.ERC721,
    }

    const makerOrder1155: MakerOrder = looksRareOrder1155
    const takerOrder1155: TakerOrder = {
      minPercentageToAsk: looksRareOrder1155.minPercentageToAsk,
      price: looksRareOrder1155.price,
      taker: ROUTER_ADDR,
      tokenId: looksRareOrder1155.tokenId,
      isOrderAsk: false,
      params: looksRareOrder1155.params,
    }
    const looksRareData1155: LooksRareData = {
      makerOrder: makerOrder1155,
      takerOrder: takerOrder1155,
      recipient,
      tokenType: TokenType.ERC1155,
    }

    it('encodes buying one ERC721 from LooksRare', async () => {
      const looksRareTrade = new LooksRareTrade([looksRareData721])
      const methodParameters = SwapRouter.swapNFTCallParameters([looksRareTrade], { sender: FORGE_SENDER_ADDRESS })
      registerFixture('_LOOKSRARE_BUY_ITEM_721', methodParameters)
      expect(hexToDecimalString(methodParameters.value)).to.eq(looksRareOrder721.price)
      expect(methodParameters.calldata).to.eq(
        '0x24856bc300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000211040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000004800000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000005180db8f5c931aae63c74266b211f580155ecac800000000000000000000000000000000000000000000000000000000000010eb0000000000000000000000000000000000000000000000000000000000000344b4e4b2960000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004a873bdd49f7f9cc0a5458416a12973fab208f8d000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000000000000000000000000010eb000000000000000000000000000000000000000000000000000000000000213400000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000022e86ab483084053562ce713e94431c29d1adb8b0000000000000000000000005180db8f5c931aae63c74266b211f580155ecac8000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000000000000000000000000010eb000000000000000000000000000000000000000000000000000000000000000100000000000000000000000056244bb70cbd3ea9dc8007399f61dfc065190031000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000006263a334000000000000000000000000000000000000000000000000000000006350e31f00000000000000000000000000000000000000000000000000000000000021340000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001b2d89300623b02e6305d770925d6a34006de07723fd0910a0b1f7780c6964a41b1430768f23a5ad85c14de1a97fcc428fd001944dfcb659fd73f3f70e653e450700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cf03dd0a894ef79cb5b601a43c4b25e3ae4c67ed0000000000000000000000000000000000000000000000000000000000000000'
      )
    })

    it('encodes buying one ERC1155 from LooksRare', async () => {
      const looksRareTrade = new LooksRareTrade([looksRareData1155])
      const methodParameters = SwapRouter.swapNFTCallParameters([looksRareTrade], { sender: FORGE_SENDER_ADDRESS })
      registerFixture('_LOOKSRARE_BUY_ITEM_1155', methodParameters)
      expect(hexToDecimalString(methodParameters.value)).to.eq(looksRareOrder1155.price)
      expect(methodParameters.calldata).to.eq(
        '0x24856bc300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000214040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000f4680c917a873e2dd6ead72f9f433e74eb9c623c000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000344b4e4b2960000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004a873bdd49f7f9cc0a5458416a12973fab208f8d00000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000213400000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000008246137c39bb05261972655186a868bdc8a9eb11000000000000000000000000f4680c917a873e2dd6ead72f9f433e74eb9c623c00000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000100000000000000000000000056244bb70cbd3ea9dc8007399f61dfc065190031000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000006260401e00000000000000000000000000000000000000000000000000000000634d8e1700000000000000000000000000000000000000000000000000000000000021340000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001b4353a91cb2f3d9eba1136514a3eba255b7043244886ea3d0bb89d0ccea6a40cd0608814e41edd6852ceb3f1a2a0ab6fc1851b20baf92f26e7c3b570a5408ccd600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cf03dd0a894ef79cb5b601a43c4b25e3ae4c67ed0000000000000000000000000000000000000000000000000000000000000000'
      )
    })
  })

  describe('X2Y2', () => {
    const x2y2SignedOrder721 = x2y2Orders[0]
    const x2y2SignedOrder1155 = x2y2Orders[1]
    const ENS_NFT_ADDR = '0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85'
    const CAMEO_ADDRESS = '0x93317E87a3a47821803CAADC54Ae418Af80603DA'

    const x2y2_721_Data: X2Y2Data = {
      signedInput: x2y2SignedOrder721.input,
      recipient: SAMPLE_ADDR,
      price: x2y2SignedOrder721.price,
      tokenId: x2y2SignedOrder721.token_id,
      tokenAddress: ENS_NFT_ADDR,
      tokenType: TokenType.ERC721,
    }

    const x2y2_1155_Data: X2Y2Data = {
      signedInput: x2y2SignedOrder1155.input,
      recipient: SAMPLE_ADDR,
      price: x2y2SignedOrder1155.price,
      tokenId: x2y2SignedOrder1155.token_id,
      tokenAddress: CAMEO_ADDRESS,
      tokenType: TokenType.ERC1155,
      tokenAmount: 1,
    }

    it('encodes buying one ERC-721 from X2Y2', async () => {
      const x2y2Trade = new X2Y2Trade([x2y2_721_Data])
      const methodParameters = SwapRouter.swapNFTCallParameters([x2y2Trade], { sender: FORGE_SENDER_ADDRESS })
      registerFixture('_X2Y2_721_BUY_ITEM', methodParameters)
      expect(hexToDecimalString(methodParameters.value)).to.eq(x2y2SignedOrder721.price)
      expect(methodParameters.calldata).to.eq(
        '0x24856bca00000000000000000000000000000000000000000000000000494654067e1000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000057f1887a8bf19b14fc0df6fd9b2acc9af147ea850e2d28628b4a177f893b3c31e4f64a3fefc6cfa562ec3c71867725934686fb2600000000000000000000000000000000000000000000000000000000000006c4357a150b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000004800000000000000000000000000000000000000000000000000000be0c907f46280000000000000000000000000000000000000000000000000000000063656a8d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004a873bdd49f7f9cc0a5458416a12973fab208f8d0000000000000000000000000000000000000000000000000000000000000000f9ad9c0ae9720780f84e926d8626f073e7c2a4ce9f3b77ade5a27a913ef09a425a71932a5cbb411886d82178a3fc0cbf11ba452abcc95a7901a7d4085fb5fc3f000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000047f67d1e1552334d404c80f5cbef820000000000000000000000000d4f16530fbcd336b4f0d4d1717487a65098be7cd0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000063ea6d9e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c09d2388f6e390220f9d861cf0d793c77ef44bd8d97897b12c36ace9931acd72a5395fc36d3f1c5500e050ed703f7112a01e99295a093424a1a2fa66930e24a995000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000494654067e10000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000057f1887a8bf19b14fc0df6fd9b2acc9af147ea850e2d28628b4a177f893b3c31e4f64a3fefc6cfa562ec3c71867725934686fb26000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000494654067e10000fe98b8bf04d1bc66dd380d36c901fa2c5b2ec3097b59729fcdb29dee694c6fbe000000000000000000000000f849de01b080adc3a814fabe1e2087475cf2ed823c605807cc5e6bd6fc0d7e4eea50d3e2d66cd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cf03dd0a894ef79cb5b601a43c4b25e3ae4c67ed0000000000000000000000000000000000000000000000000000000000000000'
      )
    })
    it('encodes buying one ERC-1155 from X2Y2', async () => {
      const x2y2Trade = new X2Y2Trade([x2y2_1155_Data])
      const methodParameters = SwapRouter.swapNFTCallParameters([x2y2Trade], { sender: FORGE_SENDER_ADDRESS })
      registerFixture('_X2Y2_1155_BUY_ITEM', methodParameters)
      expect(hexToDecimalString(methodParameters.value)).to.eq(x2y2SignedOrder1155.price)
      expect(methodParameters.calldata).to.eq(
        '0x24856bc30000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000021b0400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000084000000000000000000000000000000000000000000000000000000000000007e000000000000000000000000000000000000000000000000001df9dc8e4ad800000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000093317e87a3a47821803caadc54ae418af80603da0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000006e4357a150b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000004a00000000000000000000000000000000000000000000000000000dda10ff3d56f000000000000000000000000000000000000000000000000000000006374395b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004a873bdd49f7f9cc0a5458416a12973fab208f8d00000000000000000000000000000000000000000000000000000000000000008c5185cd2f0ed88cd5962e6ede9a81b8fcc26ccba22dde10d784b08f5fcf43cf257349b38fc2af2d30aae4f2daa5ad177e0578ec7581fa41bb8c23a34f644d76000000000000000000000000000000000000000000000000000000000000001b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000006eea9a96b66513fd634c399565f53fc90000000000000000000000008a3acc2d82c9a19efdbddb803add7bf7713c45450000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000063fb0888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c0fc596083a0132d07cfd02dce0f55ce677b91cc59ebf6d57927593f02b18017192e9379735ef777f756112207f5d6edbba91efb5cdf062c7488a29d961f518418000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000001df9dc8e4ad8000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000093317e87a3a47821803caadc54ae418af80603da000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001df9dc8e4ad80009c48d3d0911702d217e91c00db0e8b5ef4dd6db0fa6d66837460bfb6a230cc71000000000000000000000000024ac22acdb367a3ae52a3d94ac6649fdc1fd823c605807cc5e6bd6fc0d7e4eea50d3e2d66cd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cf03dd0a894ef79cb5b601a43c4b25e3ae4c67ed0000000000000000000000000000000000000000000000000000000000000000'
      )
    })
  })

  describe('Seaport', () => {
    it('encodes buying two NFTs from Seaport', async () => {
      const value = seaportValue
      const seaportTrade = new SeaportTrade([seaportData2Covens])
      const methodParameters = SwapRouter.swapNFTCallParameters([seaportTrade], { sender: FORGE_SENDER_ADDRESS })
      registerFixture('_SEAPORT_BUY_ITEMS', methodParameters)
      expect(hexToDecimalString(methodParameters.value)).to.eq(value.toString())
      expect(methodParameters.calldata).to.eq(
        ''
      )
    })
  })

  describe('Cryptopunk', () => {
    // buyItem from block 15725945
    const cryptopunk: CryptopunkData = {
      tokenId: 2976,
      recipient: SAMPLE_ADDR,
      value: BigNumber.from('76950000000000000000'),
    }

    it('encodes a single cryptopunk trade', async () => {
      const cryptopunkTrade = new CryptopunkTrade([cryptopunk])
      const methodParameters = SwapRouter.swapNFTCallParameters([cryptopunkTrade], { sender: FORGE_SENDER_ADDRESS })
      registerFixture('_CRYPTOPUNK_BUY_ITEM', methodParameters)
      expect(hexToDecimalString(methodParameters.value)).to.eq(cryptopunk.value.toString())
      expect(methodParameters.calldata).to.eq(
        '0x24856bc300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000213040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000ba0000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000042be5514d2a4f000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cf03dd0a894ef79cb5b601a43c4b25e3ae4c67ed0000000000000000000000000000000000000000000000000000000000000000'
      )
    })
  })

  describe('nft20', () => {
    // buyItem from block 15770228
    const nft20Data: NFT20Data = {
      tokenIds: [129, 193, 278],
      tokenAddress: '0x6d05064fe99e40f1c3464e7310a23ffaded56e20',
      tokenAmounts: [1, 1, 1],
      recipient: SAMPLE_ADDR,
      fee: 0,
      isV3: false,
      value: BigNumber.from('20583701229648230'),
    }

    it('encodes an NFT20 trade with three items', async () => {
      const nft20Trade = new NFT20Trade([nft20Data])
      const methodParameters = SwapRouter.swapNFTCallParameters([nft20Trade], { sender: FORGE_SENDER_ADDRESS })
      registerFixture('_NFT20_BUY_ITEM', methodParameters)
      expect(hexToDecimalString(methodParameters.value)).to.eq(nft20Data.value.toString())
      expect(methodParameters.calldata).to.eq(
        '0x24856bc30000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000021a040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000004920c467f4b966000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c4dc631bea0000000000000000000000006d05064fe99e40f1c3464e7310a23ffaded56e2000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000008100000000000000000000000000000000000000000000000000000000000000ccf03dd0a894ef79cb5b601a43c4b25e3ae4c67ed0000000000000000000000000000000000000000000000000000000000000000'
      )
    })
  })

  describe('sudoswap', () => {
    // buyItem from block 15770228
    const sudoswapData: SudoswapData = {
      swaps: [
        {
          swapInfo: {
            pair: '0x339e7004372e04b1d59443f0ddc075efd9d80360',
            nftIds: [80, 35, 93],
          },
          tokenAddress: '0xfa9937555dc20a020a161232de4d2b109c62aa9c',
          maxCost: '73337152777777783',
        },
      ],
      nftRecipient: SAMPLE_ADDR,
      ethRecipient: SAMPLE_ADDR,
      deadline: '2000000000',
    }

    it('encodes an Sudoswap trade with three items', async () => {
      const sudoswapTrade = new SudoswapTrade([sudoswapData])
      const methodParameters = SwapRouter.swapNFTCallParameters([sudoswapTrade], { sender: FORGE_SENDER_ADDRESS })
      registerFixture('_SUDOSWAP_BUY_ITEM', methodParameters)
      expect(hexToDecimalString(methodParameters.value)).to.eq(sudoswapData.swaps[0].maxCost.toString())
      expect(methodParameters.calldata).to.eq(
        '0x24856bc300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000219040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000001048bc07c287277000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c43efd9e710000000000000000000000000000000000000000000000000000000000000080000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000000000000000000000000000000000007735940000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000001048bc07c287277000000000000000000000000339e7004372e04b1d59443f0ddc075efd9d803600000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000023000000000000000000000000000000000000000000000000000000000000005d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cf03dd0a894ef79cb5b601a43c4b25e3ae4c67ed0000000000000000000000000000000000000000000000000000000000000000'
      )
    })
  })

  describe('Partial Fill', () => {
    // buyItems from block 15360000
    const nftxPurchase2Covens: NFTXData = {
      recipient: SAMPLE_ADDR,
      vaultAddress: '0xd89b16331f39ab3878daf395052851d3ac8cf3cd',
      vaultId: 333,
      tokenAddress: '0x5180db8f5c931aae63c74266b211f580155ecac8',
      tokenIds: [584, 303], // invalid tokenIds
      value: expandTo18DecimalsBN(1),
    }

    it('encodes partial fill for multiple trades between protocols', async () => {
      const nftxTrade = new NFTXTrade([nftxPurchase2Covens])
      const seaportTrade = new SeaportTrade([seaportData2Covens])
      const methodParameters = SwapRouter.swapNFTCallParameters([nftxTrade, seaportTrade], {
        sender: FORGE_SENDER_ADDRESS,
      })
      registerFixture('_PARTIAL_FILL', methodParameters)
      expect(hexToDecimalString(methodParameters.value)).to.eq(expandTo18DecimalsBN(1).add(seaportValue).toString())
      expect(methodParameters.calldata).to.eq(
        ''
      )
    })

    it('encodes partial fill for multiple swaps within the same protocol', async () => {
      // buyItem from block 15725945
      const foundationData1: FoundationData = {
        referrer: '0x459e213D8B5E79d706aB22b945e3aF983d51BC4C',
        tokenAddress: '0xEf96021Af16BD04918b0d87cE045d7984ad6c38c',
        tokenId: 32,
        price: expandTo18DecimalsBN(0.01),
        recipient: SAMPLE_ADDR,
      }

      // buyItem from block 15725945
      const foundationData2: FoundationData = {
        referrer: '0x459e213D8B5E79d706aB22b945e3aF983d51BC4C',
        tokenAddress: '0xEf96021Af16BD04918b0d87cE045d7984ad6c38c',
        tokenId: 100, // invalid not for sale
        price: expandTo18DecimalsBN(0.01),
        recipient: SAMPLE_ADDR,
      }

      const value = BigNumber.from(foundationData1.price).add(foundationData2.price)

      const foundationTrade = new FoundationTrade([foundationData1, foundationData2])
      const methodParameters = SwapRouter.swapNFTCallParameters([foundationTrade], {
        sender: FORGE_SENDER_ADDRESS,
      })
      const methodParametersV2 = SwapRouter.swapCallParameters([foundationTrade], {
        sender: FORGE_SENDER_ADDRESS,
      })
      registerFixture('_PARTIAL_FILL_WITHIN_PROTOCOL', methodParameters)
      expect(hexToDecimalString(methodParameters.value)).to.eq(value.toString())
      expect(methodParameters.calldata).to.eq(
        '0x24856bc30000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000039c9c0400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000ef96021af16bd04918b0d87ce045d7984ad6c38c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000084b01ef608000000000000000000000000ef96021af16bd04918b0d87ce045d7984ad6c38c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000459e213d8b5e79d706ab22b945e3af983d51bc4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000ef96021af16bd04918b0d87ce045d7984ad6c38c00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000084b01ef608000000000000000000000000ef96021af16bd04918b0d87ce045d7984ad6c38c0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000459e213d8b5e79d706ab22b945e3af983d51bc4c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cf03dd0a894ef79cb5b601a43c4b25e3ae4c67ed0000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(methodParameters.calldata).to.eq(methodParametersV2.calldata)
    })
  })
})
